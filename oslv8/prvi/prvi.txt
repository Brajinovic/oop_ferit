#include <stdio.h>
#include <pthread.h>
#include <math.h>


float variable1=10;
float variable2 = 9;
pthread_mutex_t mutex;
pthread_cond_t condFirstFunction, condSecondFunction;

void *firstFunction() {
	pthread_mutex_lock(&mutex);//kad udje, zauzmi mutex tj CPU
	while(1){
		//Radi samo ako je variable2>=variable1
		while(variable1 > variable2){
			pthread_cond_wait(&condFirstFunction, &mutex);//ako je var1 > var2, blokiraj povecavanje var1
		}
		variable1 = 3*variable1*variable1 + 4*variable1 - 3;
		variable2 = sqrt(abs(variable2)) - 4;
		printf("Thread1: %.2f %.2f\n", variable1, variable2);
		//Obavijesti drugu nit ako je variable1>=variable2
		if(variable1 >= variable2){
			pthread_cond_signal(&condSecondFunction);
			pthread_mutex_unlock(&mutex);
		}
	}
	pthread_exit(0);
}


void *secondFunction() {
	pthread_mutex_lock(&mutex);//kad udje, zauzmi mutex tj CPU
	while(1){
		//Radi samo ako je variable1>=variable2
		while(variable1 < variable2){
			pthread_cond_wait(&condSecondFunction, &mutex);
		}
		variable1 = sqrt(abs(variable1))-4;
		variable2 = 3*variable2*variable2 + 4*variable2 - 3;
		printf("Thread2: %.2f %.2f\n", variable1, variable2);
		//Obavijesti prvu nit ako je variable2>=variable1
		if(variable1 <= variable2){
			pthread_cond_signal(&condFirstFunction);
			pthread_mutex_unlock(&mutex);
		}
	}
	pthread_exit(0);
}


int main(void) {
	pthread_mutex_init(&mutex, 0);
	pthread_cond_init(&condFirstFunction, 0);
	pthread_cond_init(&condSecondFunction, 0);
	pthread_t thread1, thread2;
	pthread_create(&thread1, NULL, firstFunction, NULL);
	pthread_create(&thread2, NULL, secondFunction, NULL);
	pthread_join(thread1, NULL);
	pthread_join(thread2, NULL);
	
	pthread_cond_destroy(&condFirstFunction);
	pthread_cond_destroy(&condSecondFunction);
	pthread_mutex_destroy(&mutex);
	return 0;
}